title:: Repetition: Cheatsheet
summary:: Cheatsheet for Repetition.sc and NodeProxies
categories:: Language
related:: Classes/Repetition

Things to remember in case I forget everything.

section:: Useful Classes and UGens

code::
Event;
List;
Dictionary;
SequenceableCollection;
::

code::
// SIGNALS
// Pink Noise.
PinkNoise.ar;
// non-bandlimited impulses. AKA: Clicks. See Blip.
Impulse.ar;
// Fast Sine.
FSinOsc.ar;

// FX
// Bit crush and Sample Rate reducing.
Decimator.ar;
// Basic Reverb. See JPVerb or GVerb.
FreeVerb.ar;
// Signal Degradation
WaveLoss.ar;
// Pitch shift
Squiz.ar;
// Granular pitch shift
PitchShift.ar;
// All pass delay w/ linear interpolation.
AllpassL.ar;
// Simple delay w/ linear interpolation.
DelayL.ar;

// CONTROL RATE
// Sine wave.
SinOsc.kr;
// Squarish wave.
LFPulse.kr;
// Tracks XY-axis. warp: 0 -> \linear, 1 -> \exponential.
MouseX.kr;
MouseY.kr;

// EQ
// Resonant High Pass Filter. Allows frequencies >= freq.
RHPF.ar;
// Resonant Low Pass Filter. Allows frequencies =< freq.
RLPF.ar;
// Attenuate or boost a given frequency. db < 0 attenuate, db > 0 boosts.
MidEQ.ar;

// ENVELOPES (normally with doneAction:2)
EnvGen.ar;
Env.adsr;
Env.perc;

// MIXING
// Reads inputs. See In.
SoundIn.ar;
// Mixes an array of signals into a single signal (or an array of).
Mix.ar;
// A Limiter. See Normalizer. See Compander.
Limiter.ar;
// Sample accurate output. See Out.
OffsetOut.ar;
// Send signal to a bus, crossfading with previous contents.
XOut.ar;
::


section:: Snippets

code::
// simple saw
~saw = {
  |amp=0.9, freq=80, ctf=12500, mix=0.25, room=0.9|
  var sig;
  sig = Mix.ar(FreeVerb.ar(RLPF.ar(LFSaw.ar([freq, freq*1.01, freq*0.99]), ctf, 0.5) * -15.dbamp, mix, room))!2;
  OffsetOut.ar(0, Limiter.ar(sig * amp, 0.9));
}

// same saw, plus waveform selector.
~saw = {
  |amp=0.9, freq=80, ctf=12500, mix=0.25, room=0.9, wave=0, pulse=10|
  var sig = Mix.ar([FreeVerb.ar(RLPF.ar(LFSaw.ar([freq, freq*1.01, freq*0.99]), ctf, 0.5) * -10.dbamp, mix, room)!2]);
  sig = Select.ar(wave, [sig, sig * LFPulse.kr(pulse, width:0.75)]);
  OffsetOut.ar(0, Limiter.ar(sig * amp, 0.9));
}

// Noisy background with reverb
(
~pink = {
  |freq = 55, amp=0.125, vib=0.5|
  var sig;
  sig = PinkNoise.ar([freq, freq*0.99, freq*1.01],mul:0.9)!2 * SinOsc.kr(vib);
  sig = FreeVerb.ar(Mix.ar([RHPF.ar(sig, freq:freq*2, rq:0.125) * -5.dbamp, sig, FreeVerb.ar(sig, 0.9, 0.9, mul:0.5)]), 0.5, 0.5);
  OffsetOut.ar(0, Limiter.ar(sig * amp, 0.9));
};

// Noisy saw.
~nsaw = {
  |basenote=36, plusnote=12, ctf=1250, amp=0.25|
  var sig;
  sig = RLPF.ar(LFTri.ar(Vibrato.kr((basenote+12+plusnote+Chord(\maj)).collect(_.midicps)!2, rate:6), [0, FSinOsc.kr(0.5)], mul:0.05), ctf, FSinOsc.kr(10).clip(0.1,0.125)) * -5.dbamp * FSinOsc.kr(0.2).clip(0.5,0.8);
  sig = sig + (RLPF.ar(LFSaw.ar(Vibrato.kr((basenote+plusnote+Chord(\maj9)).collect(_.midicps)!2, rate:6, iphase: [0, FSinOsc.kr(0.1)]), [0, FSinOsc.kr(0.5)], mul:0.05), ctf, FSinOsc.kr(10).clip(0.1,0.125)) * -2.dbamp * FSinOsc.kr(0.1));
  sig = Mix.ar([sig* -5.dbamp, FreeVerb.ar(sig, 0.9, 0.9) * 2.dbamp]);
  OffsetOut.ar(2, Limiter.ar(sig * amp, 0.9));
}

// crappy strings
~fb = {
  |freq, amp=0.9|
  var sig = FreeVerb.ar(SinOscFB.ar([1, 0.99, 1.01] * freq, 1, 0.5) * (SinOsc.kr(2) * 0.75), 0.9, 0.9);
  OffsetOut.ar(0, Limiter.ar(Mix.ar(sig * amp)!2, 0.9));
};
)
::

