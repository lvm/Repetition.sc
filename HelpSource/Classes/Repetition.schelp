class:: Repetition
summary:: A set of tools to build a `Stream` of Events`.
categories:: Live Coding
related:: Guides/Cheatsheet

DESCRIPTION::

link::Classes/Repetition:: is a link::Classes/String:: parser that builds a link::Classes/Stream:: of link::Classes/Event::.

note::
This software is experimental, mainly an exploration of SuperCollider + Live Coding.
::

SECTION:: Introduction

SUBSECTION:: Quickstart

The parser recognizes the following "symbols":

LIST::
## Parallel: code::"a|b"::, plays symbols simultaneously. Kind of a Chord.
## Groups: code::"a+b"::, plays symbols sharing the duration. If the duration is 1, each will have a duration of 1/2.
## Accent: code::"a@"::, sums a quarter of the original amplitude to it. That is: amplitude/4.
## Shift octave up: code::"a'"::, Current Octave +1.
## Shift octave down: code::"a,"::, Current Octave -1.
## Repeat once: code::"a!"::, Repeats the symbol once.
## Repeat N times: code::"a*N":: (teletype::N -> Int::), Repeats symbols N times.
::

All of them are "chainable". For example, a Pattern (ab)using every option available:

code::
"a*3 b@+c' d@!, e+f".asRepetitionStream.nextNRP(23);
[ ( 'dur': 0.14285714285714, 'symbol': a, 'shift': 0, 'midinote': 9,
  'typeof': note, 'accent': 0 ), ( 'dur': 0.14285714285714, 'symbol': a, 'shift': 0, 'midinote': 9,
  'typeof': note, 'accent': 0 ), ( 'dur': 0.14285714285714, 'symbol': a, 'shift': 0, 'midinote': 9,
  'typeof': note, 'accent': 0 ), ( 'dur': 0.071428571428571, 'symbol': b@, 'shift': 0, 'midinote': 11,
  'typeof': note, 'accent': 0.25 ), ( 'dur': 0.071428571428571, 'symbol': c', 'shift': 1, 'midinote': 0,
  'typeof': note, 'accent': 0 ...etc...
::

SUBSECTION:: Bjorklund / Euclidean Rhythm

By taking advantage of the link::Classes/Bjorklund:: Quark, we are able to generate a link::Classes/String:: that represent the same rhythm. The valid args are code::k:: which represents the amount of notes distributed in code::n:: places, and code::rotate:: which will shift positions.

For example:

code::
"bd".bjorklund(4,16).quote;
-> "bd r r r bd r r r bd r r r bd r r r"
::

code::
"bd".bjorklund(4,16,2).quote;
-> "r r bd r r r bd r r r bd r r r bd r"
::

Additionally, it's possible to pass more than one 'symbol' to a Bjorklund rhythm, such as code::sn rm::, which will be distributed to each `hit`. Therefore creating a more coherent pattern.

For example:

code::
"sn rm".bjorklund(3,8).quote;
-> "sn r r rm r r sn r"
::

So, this creates a link::Classes/Stream:: of link::Classes/Event:: with 1/8 duration each.

code::
"sn rm".bjorklund(3,8).asRepetitionStream.nextNRP(8);
-> [ ( 'dur': 0.125, 'symbol': sn, 'shift': 0, 'midinote': 38,
  'typeof': percussion, 'accent': 0 ), ( 'dur': 0.125, 'symbol': r, 'shift': 0, 'midinote': rest,
  'typeof': rest, 'accent': 0 ), ( 'dur': 0.125, 'symbol': r, 'shift': 0, 'midinote': rest,
  'typeof': rest, 'accent': 0 ), ( 'dur': 0.125, 'symbol': rm, 'shift': 0, 'midinote': 37,
  'typeof': percussion, 'accent': 0 ), ( 'dur': 0.125, 'symbol': r, 'shift': 0, 'midinote': rest,
  'typeof': rest, 'accent': 0 ), ( 'dur': 0.125, 'symbol': r, 'shift...etc...
::


SUBSECTION:: Type of Patterns

This is done automagically behind the scenes, so you can evaluate "bd r*3 sd r*3" and it will be converted to the correct Note.

So far, these are available:

LIST::
## code::\percussion::, converts to General MIDI Percussion Note.
## code::\note::, converts to a Note (ABC Format) to its semitone (code::0..12::).
## code::\chord::, converts to a Chord (a collection of Note)).
## code::\rest::, converts to a link::Classes/Rest::.
::

These callbacks have a shortcut version in the form of a method.

code::
"bd sn".asRepetitionStream.nextNRP(2);
-> [
    ( 'dur': 0.5, 'symbol': sn, 'shift': 0, 'midinote': 38, 'typeof': \percussion, 'accent': 0 ),
    ( 'dur': 0.5, 'symbol': rm, 'shift': 0, 'midinote': 37, 'typeof': \percussion, 'accent': 0 )
]
::

code::
"cmaj dmaj7".asRepetitionStream.nextNRP(2);
-> [ ( 'dur': 0.5, 'symbol': cmaj, 'shift': 0, 'midinote': [ 0, 4, 7 ], 'typeof': \chord, 'accent': 0 ),
    ( 'dur': 0.5, 'symbol': dmaj7, 'shift': 0, 'midinote': [ 2, 6, 9, 13 ], 'typeof': \chord, 'accent': 0 )
]
::

code::
"c d".asRepetitionStream.nextNRP(2);
-> [ ( 'dur': 0.5, 'symbol': c, 'shift': 0, 'midinote': 0, 'typeof': \chord, 'accent': 0 ),
    ( 'dur': 0.5, 'symbol': d, 'shift': 0, 'midinote': 2, 'typeof': \chord, 'accent': 0 )
]
::


SECTION:: Actually playing something

SUBSECTION:: The "Player".

LIST::
## code::rePlayer(...args)::, similar to link::Classes/Pbind::.
::


code::
(
~x = "bd sn".bjorklund(3,8).rePlayer(
  \tempo, 120/60,
  \amp, 0.5,
  \type,\md,
  \chan, 9,
  \sustain, 1,
  \dur, 1/4,
)
;
)
::

code::
(
~x =  "c g a".bjorklund(6,8).rePlayer(
  \tempo, 120/60,
  \amp, 0.5,
  \instrument, \default,
  \sustain, 1,
  \dur, 1/4,
)
;
)
::


SECTION:: Extras

SUBSECTION:: Custom MIDI Event Types

Currently, link::Classes/Repetition:: provides two custom link::Classes/Event:: types: code::\md:: and code::\cc::. Both are a simplification of a normal link::Classes/Event:: type code::\midi:: declaring by default code::~type::, code::~midiout::, code::~chan:: (code::9:: by default) and code::~amp::.
To use them you just need to call code::Repetition.initMIDI:: and code::Repetition.midiEventTypes:: .
Example:

code::
(
r = Repetition.new;
m = r.initMIDI("Midi Through", "Midi Through Port-0");
r.midiEventTypes;
)
::


SUBSECTION:: Booting up

And last but not least, the recommended way [*] to boot SuperCollider link::Classes/Server:: + link::Classes/ProxySpace:: with link::Classes/Repetition::

code::
(
r = Repetition.new;
m = r.initMIDI("Midi Through", "Midi Through Port-0");
p = r.getProxySpace;

r.midiEventTypes;  // setup repetition midi stuff
ProxyMixer(p); // and a nice proxymixer too
)
::

[*] At least, how I do it :-)


CLASSMETHODS::

METHOD:: new
Creates a Repetition instance, which will automatically boot the link::Classes/Server:: + link::Classes/ProxySpace::

ARGUMENT:: default_tempo
Defines the tempo clock for link::Classes/ProxySpace::

ARGUMENT:: quant
Defines the quantization for link::Classes/ProxySpace::

returns:: link::Classes/Repetition::

PRIVATE:: outmidi, ps, srv

INSTANCEMETHODS::

METHOD:: start
Creates a Repetition instance, which will automatically boot the link::Classes/Server:: + link::Classes/ProxySpace::

ARGUMENT:: default_tempo
Defines the tempo clock for link::Classes/ProxySpace::

ARGUMENT:: quant
Defines the quantization for link::Classes/ProxySpace::

returns:: link::Classes/Repetition::


METHOD:: initSuperDirt
(describe method here)
Starts link::Classes/SuperDirt:: with pretty much default settings, except it starts with 8 orbits (4 stereo) instead of just 2

returns:: link::Classes/SuperDirt::


METHOD:: initMIDI
Starts link::Classes/MIDIClient:: if not running, and creates link::Classes/MIDIOut:: instance

ARGUMENT:: dev
Device name. See link::Classes/MIDIOut::

ARGUMENT:: port
Port name. See link::Classes/MIDIOut::

ARGUMENT:: latency
MIDI Latency. See link::Classes/MIDIOut::

returns:: link::Classes/MIDIOut::


METHOD:: midiEventTypes
Creates two link::Classes/Event:: types, code::\md:: and code::\cc::

returns:: link::Classes/Repetition::


METHOD:: on
Sends a Note On to a MIDI Channel

ARGUMENT:: chan
Channel number

ARGUMENT:: note
MIDI Note number

ARGUMENT:: vel
MIDI Velocity

returns:: link::Classes/Repetition::


METHOD:: off
Sends a Note Off to a MIDI Channel

ARGUMENT:: chan
Channel number

returns:: link::Classes/Repetition::


METHOD:: proxySpace
Returns the link::Classes/ProxySpace:: instance

returns:: link::Classes/ProxySpace::


METHOD:: server
Returns the link::Classes/Server:: instance

returns:: link::Classes/Server::
